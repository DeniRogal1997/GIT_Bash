1) Посмотреть где я
pwd

2) Создать папку
mkdir folder

3) Зайти в папку
cd folder

4) Создать 3 папки
mkdir folder_1 folder_2 folder_3

5) Зайти в любоую папку 
cd folder_1

6) Создать 5 файлов (3 txt, 2 json)
touch filet_1.txt file_2.txt file_3.txt file_4.json file_5.json

7) Создать 3 папки
mkdir folder_1 folder_2 folder_3

8) Вывести список содержимого папки
ls -la

9) + Открыть любой txt файл 
cat >> file_1.txt

10) + написать туда что-нибудь, любой текст
"Hello"

11) + сохранить и выйти
ctrl + c

12) Выйти из папки на уровень выше
cd .. 
—
13) переместить любые 2 файла, которые вы создали, в любую другую папку. #перейдем в папку, где хранятся необходимые файлы для перемещения, далее используем эту команду: 
mv file_1.txt file_2.txt ../folder_2

14) скопировать любые 2 файла, которые вы создали, в любую другую папку.#перейдем в папку, где хранятся необходимые файлы для перемещения, далее используем эту команду: 
cp file_4.json file_5.json ../folder_2

15) Найти файл по имени 
find . -name "text_1.txt" (ВАЖНО: данный файл найдется, если мы находимся в текущей директории, где есть этот файл или этой файл будет в директориях ниже).
Также можно использовать поиск со звездочкой (*), например: find . -name te* (найдет все файлы в нашей директории и директориях по уровню ниже, названия которых начинаются с "te"

16) просмотреть содержимое в реальном времени (команда grep) изучите как она работает.
tail -f text_1.txt (откроет файл в текущей директории)

17) вывести несколько первых строк из текстового файла
head -n 2 text_1.txt (выведет 2 пeрвые строки, -n означает число первых строк, которые мы хотим вывести. Файл найдет только в текущей директории. Если мы напишем комманду без "-n", то выведет первые 10 строк)

18) вывести несколько последних строк из текстового файла
tail -n 2 text_1.txt (выведет 2 последние строки, -n означает число последних строк, которые мы хотим вывести. Файл найдет только в текущей директории. Если мы напишем комманду без "-n", то выведет последние 10 строк)

19) просмотреть содержимое длинного файла (команда less) изучите как она работает.
less text_1.txt (Файл найдет только в текущей директории)

20) вывести дату и время
date
=========

Задание *
1) Отправить http запрос на сервер.
http://162.55.220.72:5005/terminal-hw-request

1. Открываем Git bash;
2. В терминале пишем: "curl http://162.55.220.72:5005/terminal-hw-request";
3. После отправления запроса (п.2) получаем следующее сообщение в терминале: "Hello!! This is your the first response from server","Tasks":{"Task_1":"Send the next URL in terminal: http://162.55.220.72:5005/get_method?name=(set_your_String)&age=(set_your_number)","result":["Your_String","Your_number"]}}"
4. Следуем по пунктам, которые описаны в ответном сообщении от терминала - вместо "(set_your_String)" вписываем любую строку (я написал - Deni), вместо "(set_your_number)" устанавливаем любое число (я указал - 24);
5. Полная комманда в терминале будет выглядеть следующим образом: curl "http://162.55.220.72:5005/get_method?name=Deni&age=24";


2) Написать скрипт который выполнит автоматически пункты 3, 4, 5, 6, 7, 8, 13

1. Открываем директорию (папку), где хотим запустить наш скрипт (ОТКРЫВАЕМ НЕ ЧЕРЕЗ ТЕРМИНАЛ (ГИТ БАШ), А В РУЧНУЮ С ПОМОЩЬЮ ИНТЕРФЕЙСА);
2. Создаем файл с любым наименованием в формате *имя файла*.txt (СОЗДАЕМ НЕ ЧЕРЕЗ ТЕРМИНАЛ);
3. Вписываем в файл txt наш скрипт (ВПИСЫВАЕМ НЕ ЧЕРЕЗ ТЕРМИНАЛ):

cd folder 
mkdir folder_1 folder_2 folder_3 
cd folder_1
touch filet_1.txt file_2.txt file_3.txt file_4.json file_5.json
mkdir folder_1 folder_2 folder_3
ls -la
mv file_1.txt file_2.txt ../folder_2

4. Сохраняем вписанные изменения в файле и меняем его формат (просто убираем txt в конце названия файла);
5. Открываем Git bash (С ЭТОГО ПУНКТА УЖЕ НАЧИНАЕТСЯ РАБОТА ЧЕРЕЗ ТЕРМИНАЛ);
6. Заходим в директорию, где расположен наш скрипт (cd *название директории*)
7. Вписываем следующую команду: ./*имя нашего скрипта*
команда ./ - запускает скрипт
8. Команды из п.3 автоматически выполнились.
